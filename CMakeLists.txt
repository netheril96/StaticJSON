cmake_minimum_required(VERSION 3.0)
project(StaticJSON)

if (NOT MSVC)
    include(CheckCXXCompilerFlag)
    CHECK_CXX_COMPILER_FLAG(-std=c++14 CXX14_COMPILER)
    if (CXX14_COMPILER)
        add_compile_options(-std=c++14)
        add_definitions(-DSTATICJSON_EXPERIMENTAL_OPTIONAL)
    else ()
        add_compile_options(-std=c++11)
    endif ()
    add_compile_options(-fno-rtti -Wall -Wextra -pedantic -g)
endif ()

if (NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE RelWithDebInfo)
endif ()
if ("${BUILD_RAPIDJSON}" STREQUAL "true")
    include(ExternalProject)
    set(EXTERNAL_INSTALL_LOCATION ${CMAKE_BINARY_DIR}/external)
    ExternalProject_Add(rapidjson
        GIT_REPOSITORY https://github.com/Tencent/rapidjson.git
        CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${EXTERNAL_INSTALL_LOCATION}
        )
    include_directories(${EXTERNAL_INSTALL_LOCATION}/include include autojsoncxx)
endif()
include_directories(include autojsoncxx)
set(SOURCE_FILES src/staticjson.cpp)
add_library(staticjson_static STATIC ${SOURCE_FILES})
add_library(staticjson SHARED ${SOURCE_FILES})
install(TARGETS staticjson LIBRARY DESTINATION lib)
install(TARGETS staticjson_static ARCHIVE DESTINATION lib)
install(DIRECTORY "include/staticjson" DESTINATION include)

set(TARGET test_staticjson)
file(GLOB SOURCES test/*.hpp test/*.cpp include/staticjson/*.hpp)
add_executable(${TARGET} ${SOURCES})
target_link_libraries(${TARGET} staticjson_static)

enable_testing()
add_test(NAME ${TARGET} COMMAND ${TARGET} WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/test)
